/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ShoesRouteImport } from './routes/shoes'
import { Route as PromRouteImport } from './routes/prom'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as BridalRouteImport } from './routes/bridal'
import { Route as AlterationsRouteImport } from './routes/alterations'
import { Route as AccessoriesRouteImport } from './routes/accessories'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const ShoesRoute = ShoesRouteImport.update({
  id: '/shoes',
  path: '/shoes',
  getParentRoute: () => rootRouteImport,
} as any)
const PromRoute = PromRouteImport.update({
  id: '/prom',
  path: '/prom',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const BridalRoute = BridalRouteImport.update({
  id: '/bridal',
  path: '/bridal',
  getParentRoute: () => rootRouteImport,
} as any)
const AlterationsRoute = AlterationsRouteImport.update({
  id: '/alterations',
  path: '/alterations',
  getParentRoute: () => rootRouteImport,
} as any)
const AccessoriesRoute = AccessoriesRouteImport.update({
  id: '/accessories',
  path: '/accessories',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/accessories': typeof AccessoriesRoute
  '/alterations': typeof AlterationsRoute
  '/bridal': typeof BridalRoute
  '/contact': typeof ContactRoute
  '/prom': typeof PromRoute
  '/shoes': typeof ShoesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/accessories': typeof AccessoriesRoute
  '/alterations': typeof AlterationsRoute
  '/bridal': typeof BridalRoute
  '/contact': typeof ContactRoute
  '/prom': typeof PromRoute
  '/shoes': typeof ShoesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/accessories': typeof AccessoriesRoute
  '/alterations': typeof AlterationsRoute
  '/bridal': typeof BridalRoute
  '/contact': typeof ContactRoute
  '/prom': typeof PromRoute
  '/shoes': typeof ShoesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/accessories'
    | '/alterations'
    | '/bridal'
    | '/contact'
    | '/prom'
    | '/shoes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/accessories'
    | '/alterations'
    | '/bridal'
    | '/contact'
    | '/prom'
    | '/shoes'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/accessories'
    | '/alterations'
    | '/bridal'
    | '/contact'
    | '/prom'
    | '/shoes'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AccessoriesRoute: typeof AccessoriesRoute
  AlterationsRoute: typeof AlterationsRoute
  BridalRoute: typeof BridalRoute
  ContactRoute: typeof ContactRoute
  PromRoute: typeof PromRoute
  ShoesRoute: typeof ShoesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/shoes': {
      id: '/shoes'
      path: '/shoes'
      fullPath: '/shoes'
      preLoaderRoute: typeof ShoesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/prom': {
      id: '/prom'
      path: '/prom'
      fullPath: '/prom'
      preLoaderRoute: typeof PromRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bridal': {
      id: '/bridal'
      path: '/bridal'
      fullPath: '/bridal'
      preLoaderRoute: typeof BridalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/alterations': {
      id: '/alterations'
      path: '/alterations'
      fullPath: '/alterations'
      preLoaderRoute: typeof AlterationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accessories': {
      id: '/accessories'
      path: '/accessories'
      fullPath: '/accessories'
      preLoaderRoute: typeof AccessoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AccessoriesRoute: AccessoriesRoute,
  AlterationsRoute: AlterationsRoute,
  BridalRoute: BridalRoute,
  ContactRoute: ContactRoute,
  PromRoute: PromRoute,
  ShoesRoute: ShoesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
